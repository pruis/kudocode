@using Newtonsoft.Json
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8"/>
    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
    <title>@ViewData["Title"] - KudoCode.Web.Application</title>

    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.css"/>
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap-grid.css"/>
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap-theme.css"/>
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap-reboot.css"/>
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap-datetimepicker.min.css"/>
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap-datetimepicker-standalone.min.css"/>
    <link rel="stylesheet" href="~/css/site.css"/>

    <style type="text/css">

/*.form-control {*/
/*    border: 0;*/
/*    box-shadow: none; !* You may want to include this as bootstrap applies these styles too *!*/
/*}*/
/*.cellLabel*/
/*{*/
/*font-weight:bold ;*/

/*}*/

/*div[class^="col"] {*/
/*			margin: 0.1em;*/
/*			padding: 0.0em;*/
/*		}*/

		/*div[class^="col"]  {*/
		/*	margin: 0.07em;*/
		/*	padding: 0.07em;*/
		/*}*/
	@*	

		.testBorder {
			border: 1px solid black;
		}
*@

	/*.testBorder {*/
	/*		border: 1px solid black;*/
	/*	}*/

	</style>

</head>
<body>

<div class="container">
    <div class="row" id="navkoContainer" style="display: none;" data-bind="visible: true">
        <div class="col">
            @Html.Partial("_navigateTemplates")
        </div>
    </div>

    <div class="row" id="breadcrumbKOContainer" style="display: none;" data-bind="visible: true">
        <div class="col">
            @Html.Partial("_BreadCrumbsNavTemplates")
        </div>
    </div>

    <div class="row">
        <div class="col">
            @RenderBody()
        </div>
    </div>
</div>

@*<div class="row">
			<div class="col-lg-12">
				<footer>
					<p>&copy; 2017 - KudoCode.Web.Application</p>
				</footer>
			</div>
		</div>*@


<script src="~/Scripts/require.js"></script>

<script>
		require.config(
			{
				baseUrl: "/Scripts/",
				paths: {
					jquery: 'jquery-3.3.1.min',
					knockout: 'knockout-3.4.2',
					komapping: 'knockout.mapping-latest',
					underscore: 'underscore-min',
					httpErrorService: '../lib/kudocode/HttpErrorService',
					httpCallService: '../lib/kudocode/HttpCallService',
					navigationService: '../lib/kudocode/NavigationService',
					viewModel: '../lib/kudocode/ViewModel',
					global: 'Modules/Global',
					bootstrap: '../lib/bootstrap/dist/js/bootstrap.bundle.min',
					bootstrapDatePicker: 'bootstrap-datepicker',
					numeralMoneyBinding: 'knockout-numeral',
					dateTimePickerBinding: 'knockout-dateTimePicker',
					numeralMoneyInputBinding: 'knockout-numeral-money-input',
					moment: 'moment',
					numeral: '../lib/numeral/numeral.min',
					
				},
				shim: {
					komapping: {
						deps: ['knockout'],
						exports: 'komapping'
					},
					'bootstrap': {
						deps: ['jquery'],
						exports: 'bootstrap'
					},
					'bootstrapDatePicker': {
						deps: ['moment', 'jquery', 'bootstrap'],
						exports: 'bootstrapDatePicker'
					},
					'dateTimePickerBinding': {
						deps: ['knockout'],
						exports: 'dateTimePickerBinding'
					},
					'numeralMoneyBinding': {
						deps: ['numeral', 'knockout'],
						exports: 'numeralMoneyBinding'
					},
					'numeralMoneyInputBinding': {
						deps: ['numeral', 'knockout'],
						exports: 'numeralMoneyBinding'
					}
				}
			});

		
	</script>
@RenderSection("Scripts", required: false)

<script>
		var applicationUseContext = @Html.Raw(JsonConvert.SerializeObject(WebApplicationContext.ApplicationUserContext));
		var userContextViewModel;
		var breadCrumbsViewModel;
		var nav;

		require(['viewModel','bootstrap','numeral','navigationService'],
			function (vm, bootstrap,numeral, navigation) {
			navigation.Register("xx",{title: "Home", uri: "\\Portfolios"});
			nav = navigation;
			
			    numeral.register('locale', 'zar', {
                    delimiters: {
                        thousands: ',',
                        decimal: '.'
                    },
                    abbreviations: {
                        thousand: 'k',
                        million: 'm',
                        billion: 'b',
                        trillion: 't'
                    },
                    ordinal: function (number) {
                        return number === 1 ? 'er' : 'ème';
                    },
                    currency: {
                        symbol: 'R'
                    }
                });
                numeral.locale('zar');
				userContextViewModel = vm.Init(applicationUseContext,"navkoContainer", "Home");
				
				
				var items = nav.GetNavItems();
				breadCrumbsViewModel = vm.Init(items,"breadcrumbKOContainer", "Home");
			});

	</script>

</body>
</html>
using Autofac;
using AutoMapper;
using KudoCode.Contracts.Api;
using KudoCode.Helpers;
using KudoCode.LogicLayer.Dtos;
using System;

namespace KudoCode.<%service%>Service.Domain
{
    public class Save<%entity%>WorkerHandler : CommandHandler<Save<%entity%>Request,
        <%entity%>, Save<%entity%>Response>
    {
        private ISecondaryExecutionPipeline _pipeline;
        private readonly IWorkerContext<Save<%entity%>Response> context;

        public Save<%entity%>WorkerHandler(
            IMapper mapper,
            IRepository repository,
            ILifetimeScope scope,
            ISecondaryExecutionPipeline pipeline,
            IWorkerContext<Save<%entity%>Response> context)
            : base(mapper, repository, scope, context)
        {
            _pipeline = pipeline;
        }

        protected override void GetEntity()
        {
            Entity = Request.Id > 0
                ? Repository.GetOne<<%entity%>>(a => a.Id == Request.Id)
                : new <%entity%>();
        }

		protected override void ValidateEntity()
		{
			if (Entity == null)
				Context.AddMessage("E4", $"<%entity%> with ID ");
		}

        protected override void Execute()
        {
            Mapper.Map(Request, Entity);
            Repository.Save(Entity).SaveChanges();
            Context.Result = Mapper.Map<Save<%entity%>Response>(Entity);
        }
    }
}

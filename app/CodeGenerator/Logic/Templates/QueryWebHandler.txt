using System.Linq;
using AutoMapper;
using Core.Web.Api.Connector;
using KudoCode.LogicLayer.Dtos;
using KudoCode.LogicLayer.Dtos.<%folder%>;
using KudoCode.Contracts;
using KudoCode.Contracts;
using Core.Web.Application.Execution;
using Core.Web.Application.Models.Lead;
using Core.Web.Application.Models.<%folder%>;

namespace Core.Web.Application.Handlers
{
    public class <%request%><%entity%>WebHandler : IWebHandler<<%request%><%entity%>Request, <%request%><%entity%>ViewModel>
    {
        private readonly Api.Connector.Connector _connector;
        private readonly IMapper _mapper;

        public <%request%><%entity%>WebHandler(Api.Connector.Connector connector, IMapper mapper)
        {
            _connector = connector;
            _mapper = mapper;
        }

        public IWebResponseDto<<%request%><%entity%>ViewModel> Handle(<%request%><%entity%>Request request, IWebResponseDto<<%request%><%entity%>ViewModel> webResponseDto)
        {
            var lookupResponse = _connector.Lookups.Get(new GetLookupsDto(new[] {"","",""}));
            webResponseDto.Messages.AddRange(lookupResponse.Messages);

            if (webResponseDto.Messages.Any(a => a.Type == MessageDtoType.Error))
                return webResponseDto;

            webResponseDto.Result.Lookup = Extensions.AssignLookupValues(lookupResponse.Result, "");

            if (request.Id == 0)
                return webResponseDto;

            var apiResponseDto = _connector.EndPoint.Request<<%request%><%entity%>Request,<%response%>>(request);
            _mapper.Map(apiResponseDto, webResponseDto);

            return webResponseDto;
        }
    }
}
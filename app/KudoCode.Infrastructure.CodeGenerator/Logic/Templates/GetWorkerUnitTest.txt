using Autofac;
using KudoCode.Contracts;
using KudoCode.Contracts.Api;
using KudoCode.LogicLayer.Dtos;
using KudoCode.Test.Unit;
using KudoCode.Test.Unit.InMemoryDataBase;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.Linq;

namespace KudoCode.Tests.<%service%>Service.<%entity%>.Worker
{
    [TestClass]
	public class Get<%entity%>WUnitTest : UnitTestBase
	{
		private Get<%entity%>Request _request;
		private IWorkerContext<Get<%entity%>Response> _getResponse ;
		private int _id;

		public Get<%entity%>WUnitTest()
		{
		}

		[TestMethod]
		public void Get<%entity%>Worker()
		{
			base.Run(
				"Get<%entity%> Worker",
				"",
				"",
				"");
		}

		protected override void Seed()
		{
			SeedDataBase.InitializeDataBase();
			var get<%entity%>Response = ApplicationContext
				.Container
				.Resolve<IHandler<Save<%entity%>Request, IWorkerContext<Save<%entity%>Response>>>()
				.Handle(new Save<%entity%>Request() {});

			_id = get<%entity%>Response.Result.Id;
		}

		protected override void Given()
		{
			_request = new Get<%entity%>Request() { Id = _id };
		}

		protected override void When()
		{
			_getResponse  = ApplicationContext
				.Container
				.Resolve<IHandler<Get<%entity%>Request, IWorkerContext<Get<%entity%>Response>>>()
				.Handle(_request);
		}

		protected override void Then()
		{
			Assert.IsFalse(_getResponse .Messages.Any(a =>
				a.Type == MessageDtoType.Error));
		}
	}
}

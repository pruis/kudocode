@using System.Diagnostics
@using KudoCode.Contracts
@using KudoCode.Web.Blazor.Application.ViewModels
@using KudoCode.Contracts.Web
@using KudoCode.Contracts.Web
@using SharedComponents
@using System.Diagnostics;
@using Microsoft.AspNetCore.Components.Web

@inject IKudoCodeNavigation Navigation
@inject IApplicationContextHandler ApplicationContextHandler
@inject WebHandlerController WebHandlerController

<div class="top-row pl-4 navbar navbar-dark">
	<a class="navbar-brand" href="">KudoCode</a>
	<button class="navbar-toggler" onclick="ToggleNavMenu">
		<span class="navbar-toggler-icon"></span>
	</button>
</div>

<MessagesComponent Messages="@_viewModel.Messages" />

@if (!ApplicationContextHandler.IsLoggedIn())
{
	<KudoCodeLogin Login="Login" />
}
else
{
	<ul class="nav navbar-nav">
		<li>
			<a class="btn btn-sm btn-black" style="width:100%" href="#" @onclick="( () => {  LoadTableConfig(); })">Menu</a>
		</li>
		@if (_listTableConfigStore != null && _listTableConfigStore.List.Any())
		{
			@foreach (var item in _listTableConfigStore.List)
			{
				<li><a class="btn btn-sm btn-secondary" style="width:100%" href="#" @onclick="(()=>{_selectedId.SetTableConfigId(item.Id);})">@item.Name</a></li>
			}
		}
	</ul>
}
<br />

<div class="@NavMenuCssClass" onclick="ToggleNavMenu">
	<ul class="nav flex-column">
		@if (ApplicationContextHandler.IsLoggedIn())
		{
			<li class="nav-item px-3">
				<a onclick="Logout" class="nav-link" href="" Match="NavLinkMatch.All">
					<span class="oi oi-home" aria-hidden="true"></span> Logout
				</a>
			</li>
		}
		<li class="nav-item px-3">
			<NavLink class="nav-link" href="counter">
				<span class="oi oi-plus" aria-hidden="true"></span> Counter
			</NavLink>
		</li>
		<li class="nav-item px-3">
			<NavLink class="nav-link" href="fetchdata">
				<span class="oi oi-list-rich" aria-hidden="true"></span> Fetch data
			</NavLink>
		</li>
	</ul>
</div>

@functions {

	[Inject] IListTableConfigStore _listTableConfigStore { get; set; }
	[Inject] ApiPostController _apiPostController { get; set; }
	[Inject] AppState _selectedId { get; set; }

	bool collapseNavMenu = true;

	string NavMenuCssClass => collapseNavMenu ? "collapse" : null;

	protected override void OnAfterRender(bool firstRender)
	{
		base.OnAfterRender(firstRender);
	}

	void ToggleNavMenu()
	{
		collapseNavMenu = !collapseNavMenu;
	}

	async Task LoadTableConfig()
	{
		await _apiPostController
		.CreateAsync<LoadTableConfigRequest, LoadTableConfigResponse>()
			.SetOnSuccess((rsp) =>
			{
				_listTableConfigStore.List.RemoveAll(a => a != null);
				_listTableConfigStore.List.AddRange(rsp.Result.List);
			})
			.SetOnComplete((rsp) =>
			{
				InvokeAsync(StateHasChanged);
			})
		.PostAsync(new LoadTableConfigRequest() { }, "").ConfigureAwait(false);

	}

	private WebResponseDto<NavViewModel> _viewModel = new WebResponseDto<NavViewModel>();

	protected override async Task OnInitializedAsync()
	{
		await Task.Run(() => { ApplicationContextHandler.FetchContext(); });

	}

	private void Login(GetTokenRequest request)
	{
		WebHandlerController.Create<GetTokenRequest, int>()
			.SetOnSuccess((rsp) =>
			{
				Navigation.GoTo("/Dashboard");
				_viewModel.Messages = new List<MessageDto>();
			})
			.SetOnFail((rsp) => { _viewModel.Messages = rsp.Messages; })
			.Execute(new GetTokenRequest
			{
				Email = request.Email,
				Password = request.Password,
			});
	}

	private void Logout()
	{
		ApplicationContextHandler.Destroy();
		Navigation.GoTo("/");
	}

}
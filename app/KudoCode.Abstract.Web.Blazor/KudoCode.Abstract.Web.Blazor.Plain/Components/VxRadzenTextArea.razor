@using Radzen
@using Microsoft.AspNetCore.Components.Forms
@inherits FormComponent<string>
@if (Visible)
{
    <textarea @ref="@Element" disabled="@Disabled" readonly="@ReadOnly" name="@Name" rows="@Rows" cols="@Cols" style="@Style" @attributes="Attributes" class="@GetCssClass()"
          placeholder="@Placeholder" maxlength="@MaxLength" value="@Value" @onchange="@OnChange" tabindex="@TabIndex" id="@GetId()"></textarea>
}

@code
{

    [Parameter]
    public object Element { get; set; }
    [Parameter]
    public long? MaxLength { get; set; }
    [Parameter]
    public bool ReadOnly { get; set; }

    [Parameter]
    public int Rows { get; set; } = 2;

    [Parameter]
    public int Cols { get; set; } = 20;
    protected async System.Threading.Tasks.Task OnChange(ChangeEventArgs args)
    {
        Value = $"{args.Value}";

        await ValueChanged.InvokeAsync(Value);
        if (FieldIdentifier.FieldName != null) { EditContext?.NotifyFieldChanged(FieldIdentifier); }
        await Change.InvokeAsync(Value);
    }

    /// <inheritdoc />
    protected override string GetComponentCssClass()
    {
        return GetClassList("rz-textarea").ToString();
    }
}
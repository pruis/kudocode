@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.JSInterop
@using System
@using System.Collections.Generic
@using System.Diagnostics
@using System.Globalization
@using System.Threading.Tasks
@using Microsoft.Extensions.Configuration
@using KudoCode.Contracts;
@namespace KudoCode.Abstract.Web.Blazor

@inherits KudoCode.Abstract.Web.Blazor.KudoCodeUiComponent

@inject IJSRuntime JsRuntime
@inject IConfiguration Configuration

<div class="row">
	<div class="@ColClass(0) col-sm-offset-3">
		<div class="">@Title</div>
	</div>

	<div class="@ColClass(1) col-sm-offset-3">
		<div class="form-group">
			<select class="@Class" placeholder="@Title" @onchange="@Change" value="@Value">
				@foreach (var template in List)
				{
					<option value=@template.Id>@template.Description</option>
				}
			</select>
		</div>
	</div>
</div>


@functions
{

	[Parameter]
	public EventCallback<int> OnChange { get; set; }

	[Parameter]
	public int Value { get; set; }

	[Parameter]
	public List<LookupResponse> List { get; set; }

	[Parameter]
	public string Title { get; set; }

	[Parameter]
	public string Class { get; set; }

	protected override async Task OnInitializedAsync()
	{
		await Task.Run(() =>
		{
			if (string.IsNullOrWhiteSpace(Class))
				Class = "form-control";

			if (string.IsNullOrWhiteSpace(Id))
				Id = Guid.NewGuid().ToString().Replace("-", string.Empty);
		});
	}

	async void Change(ChangeEventArgs e)
	{
		Value = int.Parse(e.Value.ToString());
		OnChange.InvokeAsync(Value).Wait();
	}

}
@page "/definition-form/{Request}/{Parameters}"

@using VxFormGenerator.Core
@using VxFormGenerator.Core.Layout
@using KudoCode.Contracts
@using Microsoft.AspNetCore.Components.Forms

@inject KudoCode.Contracts.Web.ApiPostController ApiPostController;
<h1>Model Based Form Demo</h1>

<div class="card">
	<div class="card-header">
		Change form options
	</div>
	<div class="card-body">

		@*<EditForm Model="Options"
					  OnSubmit="ChangeLayoutOptions">
				<VxFormGenerator.Core.Validation.ObjectGraphDataAnnotationsValidator />

				<RenderFormElements></RenderFormElements>
				<button class="btn btn-primary" type="submit">Submit</button>
			</EditForm>*@

	</div>
</div>
<br />

<div class="card">
	<div class="card-header">
		Generated by POCO
	</div>
	<div class="card-body">

		<EditForm Model="Model.Request"
				  OnValidSubmit="HandleValidSubmit"
				  OnInvalidSubmit="HandleInValidSubmit">
			<VxFormGenerator.Core.Validation.ObjectGraphDataAnnotationsValidator />
			<RenderFormElements FormLayoutOptions="@OptionsForForm"></RenderFormElements>
			<button class="btn btn-primary" type="submit">Submit</button>
		</EditForm>
	</div>
</div>

<br />

@code{ [Parameter]
	public string Request { get; set; }
	[Parameter]
	public string Parameters { get; set; }

	/// <summary>
	/// Model that is used for the form
	/// </summary>
	private UiControllerRequestDto Model = new UiControllerRequestDto();

	private VxFormLayoutOptionsAnnotated Options = new VxFormLayoutOptionsAnnotated();
	private VxFormLayoutOptions OptionsForForm = new VxFormLayoutOptions();

	protected override void OnInitialized()
	{
		//OptionsForForm = options.ToFormLayoutOptions();

		//Model.Request = new UiControllerRequestDto();
		base.OnInitialized();

		//		var postController = new (HttpHandler);
		var x = ApiPostController
			.GetType()
			.GetMethod("CreateAsync");
		var createAsync = x?.MakeGenericMethod(KudoCode.Helpers.StaticHelpers.GetBusinessDtoType($"{Request}Request"), KudoCode.Helpers.StaticHelpers.GetBusinessDtoType($"{Request}Response"));

		var httpHandler = createAsync?.Invoke(ApiPostController, null);

		var parameters = Parameters.Split("&");
		var properties = string.Empty;

		foreach (var item in parameters)
		{
			var property = item.Split(':');
			properties += ($"'{property[0]}' : {property[1]},");
		}

		var body = "{" + properties + "}";

		string requestBody = body.Replace(",}", "}").Replace("'","\"");

		var mi = typeof(System.Text.Json.JsonSerializer).GetMethods()
			.Where(x => x.Name == "Deserialize" && x.IsGenericMethod).ToList()[1];


		var options = new System.Text.Json.JsonSerializerOptions();

		var r = mi?.MakeGenericMethod(new[] { KudoCode.Helpers.StaticHelpers.GetBusinessDtoType($"{Request}Request") });
		var request = r.Invoke(mi, new[] { requestBody, (object)options });

		var SetUiContext = httpHandler?
			.GetType()
			.GetMethod("SetUiContext");
		SetUiContext?.Invoke(httpHandler, new[] {Model.Request });


		var postAsync = httpHandler?
			.GetType()
			.GetMethod("PostAsync");


		var task = (Task)postAsync?.Invoke(httpHandler, new[] { request ,""});
		//task.ConfigureAwait(true);
		//var resultProperty = task.GetType().GetProperty("Result");


		//Model.Request = resultProperty.GetType().GetProperty("Result");
		//var messages = resultProperty.GetType().GetProperty("Messages");

	}

	/// <summary>
	/// Will handle the submit action of the form
	/// </summary>
	/// <param name="context">The model with values as entered in the form</param>
	private void HandleValidSubmit(EditContext context)
	{
		// save your changes
	}

	private void HandleInValidSubmit(EditContext context)
	{



	}

	private void ChangeLayoutOptions(EditContext context)
	{
		//var options = ((VxFormLayoutOptionsAnnotated)context.Model);
		//OptionsForForm = options.ToFormLayoutOptions();

		//Model.Request = Activator.CreateInstance(Items[options.FormRenderKind]);

	} }
